package markdown

import (
	"fmt"
	"strings"

	"github.com/grant-nelson/DrOpenAPI/internal/markdown"
)

const (
	appName = `DrOpenAPI`
	appPath = `https://github.com/Grant-Nelson/DrOpenAPI`
)

type markdownImp struct {
	factory markdown.Factory
	title   string
	index   markdown.Text
	body    []markdown.Stringer
}

func New(factory markdown.Factory, title string) markdown.Markdown {
	imp := &markdownImp{
		factory: factory,
		title:   title,
		index:   factory.Text(),
		body:    []markdown.Stringer{},
	}
	return imp
}

func (imp *markdownImp) Section(name string) {
	text := imp.factory.Text().Write("## %s", name)
	imp.body = append(imp.body, text)
	imp.index.Write(`- `).Ref(name, name).Write("\n")
}

func (imp *markdownImp) Subsection(name string) {
	text := imp.factory.Text().Write("### %s", name)
	imp.body = append(imp.body, text)
	imp.index.Write(`  - `).Ref(name, name).Write("\n")
}

func (imp *markdownImp) Par() markdown.Text {
	text := imp.factory.Text()
	imp.body = append(imp.body, text)
	return text
}

func (imp *markdownImp) Mermaid() markdown.Mermaid {
	mermaid := imp.factory.Mermaid()
	imp.body = append(imp.body, mermaid)
	return mermaid
}

func (imp *markdownImp) String() string {
	parts := make([]string, 0, len(imp.body)+3)
	if len(imp.title) > 0 {
		parts = append(parts, fmt.Sprintf("# %s", imp.title))
	}
	if index := strings.TrimSpace(imp.index.String()); len(index) > 0 {
		parts = append(parts, index)
	}
	for _, part := range imp.body {
		if text := strings.TrimSpace(part.String()); len(text) > 0 {
			parts = append(parts, text)
		}
	}
	parts = append(parts, fmt.Sprintf(`generated by [%s](%s)`, appName, appPath))
	return strings.Join(parts, "\n\n") + "\n"
}
